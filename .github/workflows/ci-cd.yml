name: Flask CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPOSITORY: ${{ secrets.DOCKER_USERNAME }}/flask-cicd
  
jobs:
  # Job 1: Code Quality & Testing
  test:
    runs-on: ubuntu-latest
    name: Test & Code Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd app
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 bandit safety

    - name: Lint with flake8
      run: |
        cd app
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security scan with bandit
      run: |
        cd app
        bandit -r . -f json -o bandit-report.json || true

    - name: Check dependencies for vulnerabilities
      run: |
        cd app
        safety check --json --output safety-report.json || true

    - name: Run tests
      run: |
        cd app
        python -m pytest --cov=. --cov-report=xml --cov-report=html || echo "No tests found"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/bandit-report.json
          app/safety-report.json
          app/htmlcov/
          app/coverage.xml

  # Job 2: Build & Push Container Image  
  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build & Push Image
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REPOSITORY }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./app
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job 3: Update Helm values (GitOps) - NO DIRECT DEPLOYMENT
  update-helm-values:
    runs-on: ubuntu-latest
    needs: build
    name: Update Helm Values for GitOps
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update image tag in Helm values
      run: |
        # Extract just the SHA-based tag from the build output
        IMAGE_TAG=$(echo "${{ needs.build.outputs.image-tag }}" | grep -E "main-[a-f0-9]{7}" | head -1)
        if [ -z "$IMAGE_TAG" ]; then
          IMAGE_TAG="latest"
        else
          # Extract just the tag part (after the colon)
          IMAGE_TAG=${IMAGE_TAG##*:}
        fi
        
        echo "Updating Helm values with image tag: $IMAGE_TAG"
        
        # Update values.yaml with new image tag
        sed -i "s|tag: .*|tag: $IMAGE_TAG|g" helm-chart/values.yaml
        
        # Update environment variable with build info
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        ENV_VALUE="CI/CD-${GITHUB_SHA:0:7}-$BUILD_DATE"
        sed -i "s|environment: .*|environment: \"$ENV_VALUE\"|g" helm-chart/values.yaml

    - name: Commit and push changes (Fleet will handle deployment)
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add helm-chart/values.yaml
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "🚀 GitOps: Update Helm values with image ${GITHUB_SHA:0:7} - Fleet will deploy [skip ci]"
          git push
          echo "✅ Helm values updated! Fleet will detect changes and deploy automatically."
        fi

  # Job 4: Security & Compliance Scanning
  security:
    runs-on: ubuntu-latest
    needs: build
    name: Security Scan
    if: github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      actions: read
      contents: read
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ env.DOCKER_REPOSITORY }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
      
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Notify & Report
  notify:
    runs-on: ubuntu-latest
    needs: [test, build, update-helm-values, security]
    name: Notify Results
    if: always()
    
    steps:
    - name: Create deployment status
      if: needs.update-helm-values.result == 'success'
      run: |
        echo "✅ CI Pipeline successful!"
        echo "🐳 Image: ${{ needs.build.outputs.image-tag }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "🌐 Branch: ${{ github.ref_name }}"
        echo "🚀 GitOps: Fleet will handle deployment automatically"
        echo "📊 Monitor deployment in Rancher UI > Fleet"
